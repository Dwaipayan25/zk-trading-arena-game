#! /usr/bin/env node
"use strict";var er=Object.create;var pe=Object.defineProperty;var tr=Object.getOwnPropertyDescriptor;var rr=Object.getOwnPropertyNames;var or=Object.getPrototypeOf,ir=Object.prototype.hasOwnProperty;var nr=(t,e)=>{for(var o in e)pe(t,o,{get:e[o],enumerable:!0})},Ge=(t,e,o,n)=>{if(e&&typeof e=="object"||typeof e=="function")for(let i of rr(e))!ir.call(t,i)&&i!==o&&pe(t,i,{get:()=>e[i],enumerable:!(n=tr(e,i))||n.enumerable});return t};var y=(t,e,o)=>(o=t!=null?er(or(t)):{},Ge(e||!t||!t.__esModule?pe(o,"default",{value:t,enumerable:!0}):o,t)),sr=t=>Ge(pe({},"__esModule",{value:!0}),t);var $r={};nr($r,{program:()=>Xt});module.exports=sr($r);var ar=()=>typeof document>"u"?new URL("file:"+__filename).href:document.currentScript&&document.currentScript.src||new URL("main.js",document.baseURI).href,C=ar();var Ae=require("process"),Qt=require("@commander-js/extra-typings");var pt=y(require("assert")),Le=y(require("fs")),ut=y(require("path")),j=y(require("process")),mt=require("@commander-js/extra-typings"),dt=y(require("tar"));var ae=require("fs/promises"),ye=y(require("path")),st=y(require("gzip-js")),at=y(require("ignore-walk")),ct=y(require("tar")),lt=y(require("tar-js"));var Z=class{constructor(e){this.config=e}};var de=y(require("axios")),ke=require("axios"),Xe=y(require("@fullstax/p-retry"));var Ye=require("buffer"),Ze=require("formdata-node");var Q=process.env.BROWSER_BUILD?window.File:Ye.File,K=process.env.BROWSER_BUILD?window.FormData:Ze.FormData;var I=class extends Error{url;status;statusText;body;request;constructor(e,o,n){super(n),this.name="ApiError",this.url=o.url,this.status=o.status,this.statusText=o.statusText,this.body=o.body,this.request=e}};var ue=class extends Error{constructor(e){super(e),this.name="CancelError"}get isCancelled(){return!0}},X=class{#t;#r;#e;#o;#i;#s;#n;constructor(e){this.#t=!1,this.#r=!1,this.#e=!1,this.#o=[],this.#i=new Promise((o,n)=>{this.#s=o,this.#n=n;let i=a=>{this.#t||this.#r||this.#e||(this.#t=!0,this.#s?.(a))},s=a=>{this.#t||this.#r||this.#e||(this.#r=!0,this.#n?.(a))},c=a=>{this.#t||this.#r||this.#e||this.#o.push(a)};return Object.defineProperty(c,"isResolved",{get:()=>this.#t}),Object.defineProperty(c,"isRejected",{get:()=>this.#r}),Object.defineProperty(c,"isCancelled",{get:()=>this.#e}),e(i,s,c)})}get[Symbol.toStringTag](){return"Cancellable Promise"}then(e,o){return this.#i.then(e,o)}catch(e){return this.#i.catch(e)}finally(e){return this.#i.finally(e)}cancel(){if(!(this.#t||this.#r||this.#e)){if(this.#e=!0,this.#o.length)try{for(let e of this.#o)e()}catch(e){console.warn("Cancellation threw an error",e);return}this.#o.length=0,this.#n?.(new ue("Request aborted"))}}get isCancelled(){return this.#e}};var Ne=t=>t!=null,fe=t=>typeof t=="string",Oe=t=>fe(t)&&t!=="",et=t=>typeof t=="object"&&typeof t.type=="string"&&typeof t.stream=="function"&&typeof t.arrayBuffer=="function"&&typeof t.constructor=="function"&&typeof t.constructor.name=="string"&&/^(Blob|File)$/.test(t.constructor.name)&&/^(Blob|File)$/.test(t[Symbol.toStringTag]),cr=t=>t instanceof K,lr=t=>t>=200&&t<300,pr=t=>{try{return btoa(t)}catch{return Buffer.from(t).toString("base64")}},ur=t=>{let e=[],o=(i,s)=>{e.push(`${encodeURIComponent(i)}=${encodeURIComponent(String(s))}`)},n=(i,s)=>{Ne(s)&&(Array.isArray(s)?s.forEach(c=>{n(i,c)}):typeof s=="object"?Object.entries(s).forEach(([c,a])=>{n(`${i}[${c}]`,a)}):o(i,s))};return Object.entries(t).forEach(([i,s])=>{n(i,s)}),e.length>0?`?${e.join("&")}`:""},mr=(t,e)=>{let o=t.ENCODE_PATH||encodeURI,n=e.url.replace("{api-version}",t.VERSION).replace(/{(.*?)}/g,(s,c)=>e.path?.hasOwnProperty(c)?o(String(e.path[c])):s),i=`${t.BASE}${n}`;return e.query?`${i}${ur(e.query)}`:i},dr=t=>{if(t.formData){if(t.formData instanceof K)return t.formData;let e=new K,o=(n,i)=>{fe(i)||et(i)?e.append(n,i):e.append(n,JSON.stringify(i))};return Object.entries(t.formData).filter(([n,i])=>Ne(i)).forEach(([n,i])=>{Array.isArray(i)?i.forEach(s=>o(n,s)):o(n,i)}),e}},me=async(t,e)=>typeof e=="function"?e(t):e,fr=async(t,e,o)=>{let n=await me(e,t.TOKEN),i=await me(e,t.USERNAME),s=await me(e,t.PASSWORD),c=await me(e,t.HEADERS),a=o&&"getHeaders"in o&&typeof o?.getHeaders=="function"&&o?.getHeaders()||{},f=Object.entries({Accept:"application/json",...c,...e.headers,...a}).filter(([p,u])=>Ne(u)).reduce((p,[u,d])=>({...p,[u]:String(d)}),{});if(Oe(n)&&(f.Authorization=`Bearer ${n}`),Oe(i)&&Oe(s)){let p=pr(`${i}:${s}`);f.Authorization=`Basic ${p}`}return e.body&&(e.mediaType?f["Content-Type"]=e.mediaType:et(e.body)?f["Content-Type"]=e.body.type||"application/octet-stream":fe(e.body)?f["Content-Type"]="text/plain":cr(e.body)||(f["Content-Type"]="application/json")),f},gr=t=>{if(t.body)return t.body},Qe=t=>!!(de.default.isAxiosError(t)&&(t.response?.status&&[502,503,504].includes(t.response.status)||t.code&&["ECONNREFUSED","ECONNRESET","ENOTFOUND","ENETUNREACH",ke.AxiosError.ECONNABORTED,ke.AxiosError.ERR_NETWORK].includes(t.code))),hr=async(t,e,o,n,i,s,c,a)=>{let f=de.default.CancelToken.source(),p={url:o,headers:s,data:n??i,method:e.method,withCredentials:t.WITH_CREDENTIALS,cancelToken:f.token,responseType:e.responseType};c(()=>f.cancel("The user aborted a request."));try{return t.sindri?await(0,Xe.default)(()=>a.request(p),{...t.sindri.retryOptions,onFailedAttempt:u=>{Qe(u)&&t.sindri.logger.debug({attemptNumber:u.attemptNumber,error:u.message,retriesLeft:u.retriesLeft},`${e.method} ${o} - Request failed, ${u.retriesLeft>0?"retrying":"aborting..."}...`)},shouldRetry:Qe}):await a.request(p)}catch(u){let d=u;if(d.response)return d.response;throw u}},yr=(t,e)=>{if(e){let o=t.headers[e];if(fe(o))return o}},br=t=>{if(t.status!==204)return t.data},Rr=(t,e)=>{let n={400:"Bad Request",401:"Unauthorized",403:"Forbidden",404:"Not Found",500:"Internal Server Error",502:"Bad Gateway",503:"Service Unavailable",...t.errors}[e.status];if(n)throw new I(t,e,n);if(!e.ok){let i=e.status??"unknown",s=e.statusText??"unknown",c=(()=>{try{return JSON.stringify(e.body,null,2)}catch{return}})();throw new I(t,e,`Generic Error: status: ${i}; status text: ${s}; body: ${c}`)}},tt=(t,e,o=de.default)=>new X(async(n,i,s)=>{let c=Date.now(),a=()=>{let u=Date.now()-c;if(u<1e3)return`${u} ms`;let d=u/1e3;if(d<60)return`${d.toFixed(2)} s`;let g=d/60;return g<60?`${g.toFixed(2)} m`:`${(g/60).toFixed(2)} h`},f=mr(t,e),p=`${e.method} ${f}`;try{let u=dr(e),d=gr(e),g=await fr(t,e,u);if(!s.isCancelled){t.sindri?.logger.debug(`${p} requested`);let l=await hr(t,e,f,d,u,g,s,o),h=br(l),m=yr(l,e.responseHeader),b={url:f,ok:lr(l.status),status:l.status,statusText:l.statusText,body:m??h},w=`${p} ${l.status} ${l.statusText} (${a()})`;!b.body||typeof b.body=="string"?t.sindri?.logger.debug(`${w} - ${b.body||"<empty-body>"}`):e.responseType==="stream"?t.sindri?.logger.debug(`${w} - <streaming-response>`):e.responseType==="blob"?t.sindri?.logger.debug(`${w} - <blob-response>`):t.sindri?.logger.debug(b.body,w),Rr(e,b),n(b.body)}}catch(u){let d=u instanceof Error?u.message:"Unknown error";t.sindri?.logger.debug(`${p} ERROR (${a()}) - ${d}`),i(u)}});var ge=class extends Z{constructor(e){super(e)}request(e){return tt(this.config,e)}};var ee=class{constructor(e){this.httpRequest=e}apikeyGenerate(e){return this.httpRequest.request({method:"POST",url:"/api/apikey/generate",body:e,mediaType:"application/json",errors:{400:"Bad Request",401:"Unauthorized",403:"Forbidden"}})}apikeyGenerateWithAuth(e){return this.httpRequest.request({method:"POST",url:"/api/v1/apikey/generate",query:{name:e},errors:{400:"Bad Request"}})}apikeyList(){return this.httpRequest.request({method:"GET",url:"/api/v1/apikey/list",errors:{500:"Internal Server Error"}})}apikeyDelete(e){return this.httpRequest.request({method:"DELETE",url:"/api/v1/apikey/{apikey_id}/delete",path:{apikey_id:e},errors:{404:"Not Found",500:"Internal Server Error"}})}};var te=class{constructor(e){this.httpRequest=e}circuitCreate(e){return this.httpRequest.request({method:"POST",url:"/api/v1/circuit/create",formData:e,mediaType:"multipart/form-data",errors:{400:"Bad Request",422:"Unprocessable Entity",500:"Internal Server Error",501:"Not Implemented"}})}circuitList(){return this.httpRequest.request({method:"GET",url:"/api/v1/circuit/list",errors:{500:"Internal Server Error"}})}circuitDetail(e,o=!0){return this.httpRequest.request({method:"GET",url:"/api/v1/circuit/{circuit_id}/detail",path:{circuit_id:e},query:{include_verification_key:o},errors:{404:"Not Found",500:"Internal Server Error"}})}circuitDelete(e){return this.httpRequest.request({method:"DELETE",url:"/api/v1/circuit/{circuit_id}/delete",path:{circuit_id:e},errors:{404:"Not Found",500:"Internal Server Error"}})}circuitProofs(e){return this.httpRequest.request({method:"GET",url:"/api/v1/circuit/{circuit_id}/proofs",path:{circuit_id:e},errors:{404:"Not Found",500:"Internal Server Error"}})}proofCreate(e,o){return this.httpRequest.request({method:"POST",url:"/api/v1/circuit/{circuit_id}/prove",path:{circuit_id:e},body:o,mediaType:"application/json",errors:{400:"Bad Request",404:"Not Found",409:"Conflict",501:"Not Implemented"}})}};var re=class{constructor(e){this.httpRequest=e}circuitDownload(e,o){return this.httpRequest.request({method:"GET",url:"/api/v1/circuit/{circuit_id}/download",path:{circuit_id:e},query:{path:o},errors:{404:"Not Found",500:"Internal Server Error"},responseType:process.env.BROWSER_BUILD?"blob":"stream"})}circuitProofsPaginated(e,o=100,n){return this.httpRequest.request({method:"GET",url:"/api/v1/circuit/{circuit_id}/proofs/paginated",path:{circuit_id:e},query:{limit:o,offset:n},errors:{404:"Not Found",500:"Internal Server Error"}})}projectCircuits(e){return this.httpRequest.request({method:"GET",url:"/api/v1/project/{project_id}/circuits",path:{project_id:e},errors:{404:"Not Found",500:"Internal Server Error"}})}projectCircuitsPaginated(e,o=100,n){return this.httpRequest.request({method:"GET",url:"/api/v1/project/{project_id}/circuits/paginated",path:{project_id:e},query:{limit:o,offset:n},errors:{404:"Not Found",500:"Internal Server Error"}})}projectDelete(e){return this.httpRequest.request({method:"DELETE",url:"/api/v1/project/{project_id}/delete",path:{project_id:e},errors:{404:"Not Found",500:"Internal Server Error"}})}projectDetail(e){return this.httpRequest.request({method:"GET",url:"/api/v1/project/{project_id}/detail",path:{project_id:e},errors:{404:"Not Found",500:"Internal Server Error"}})}projectList(e){return this.httpRequest.request({method:"POST",url:"/api/v1/project/list",body:e,mediaType:"application/json",errors:{404:"Not Found",500:"Internal Server Error"}})}projectListPaginated(e,o=100,n){return this.httpRequest.request({method:"POST",url:"/api/v1/project/list/paginated",query:{limit:o,offset:n},body:e,mediaType:"application/json",errors:{404:"Not Found",500:"Internal Server Error"}})}projectProofs(e){return this.httpRequest.request({method:"GET",url:"/api/v1/project/{project_id}/proofs",path:{project_id:e},errors:{404:"Not Found",500:"Internal Server Error"}})}projectProofsPaginated(e,o=100,n){return this.httpRequest.request({method:"GET",url:"/api/v1/project/{project_id}/proofs/paginated",path:{project_id:e},query:{limit:o,offset:n},errors:{404:"Not Found",500:"Internal Server Error"}})}projectSettings(e,o){return this.httpRequest.request({method:"POST",url:"/api/v1/project/{project_name}/settings",path:{project_name:e},body:o,mediaType:"application/json",errors:{404:"Not Found",422:"Unprocessable Entity",500:"Internal Server Error"}})}circuitSmartContractVerifier(e){return this.httpRequest.request({method:"GET",url:"/api/v1/circuit/{circuit_id}/smart_contract_verifier",path:{circuit_id:e},errors:{404:"Not Found",409:"Conflict",500:"Internal Server Error",501:"Not Implemented"}})}circuitStatus(e){return this.httpRequest.request({method:"GET",url:"/api/v1/circuit/{circuit_id}/status",path:{circuit_id:e},errors:{404:"Not Found",500:"Internal Server Error"}})}passwordChangeWithJwtAuth(e){return this.httpRequest.request({method:"POST",url:"/api/v1/password/change",body:e,mediaType:"application/json",errors:{422:"Unprocessable Entity"}})}proofList(e){return this.httpRequest.request({method:"POST",url:"/api/v1/proof/list",body:e,mediaType:"application/json",errors:{500:"Internal Server Error"}})}proofListPaginated(e,o=100,n){return this.httpRequest.request({method:"POST",url:"/api/v1/proof/list/paginated",query:{limit:o,offset:n},body:e,mediaType:"application/json",errors:{500:"Internal Server Error"}})}proofStatus(e){return this.httpRequest.request({method:"GET",url:"/api/v1/proof/{proof_id}/status",path:{proof_id:e},errors:{404:"Not Found",500:"Internal Server Error"}})}sindriManifestSchema(){return this.httpRequest.request({method:"GET",url:"/api/v1/sindri-manifest-schema.json"})}teamAvatarUpload(e){return this.httpRequest.request({method:"POST",url:"/api/v1/team/avatar/upload",formData:e,mediaType:"multipart/form-data",errors:{400:"Bad Request",500:"Internal Server Error"}})}teamDetail(e){return this.httpRequest.request({method:"GET",url:"/api/v1/team/{team_name}/detail",path:{team_name:e},errors:{404:"Not Found"}})}teamMe(){return this.httpRequest.request({method:"GET",url:"/api/v1/team/me"})}userMeWithJwtAuth(){return this.httpRequest.request({method:"GET",url:"/api/v1/user/me"})}};var oe=class{constructor(e){this.httpRequest=e}proofDetail(e,o=!0,n=!0,i=!0,s=!0){return this.httpRequest.request({method:"GET",url:"/api/v1/proof/{proof_id}/detail",path:{proof_id:e},query:{include_proof:o,include_public:n,include_smart_contract_calldata:i,include_verification_key:s},errors:{404:"Not Found",500:"Internal Server Error",501:"Not Implemented"}})}proofDelete(e){return this.httpRequest.request({method:"DELETE",url:"/api/v1/proof/{proof_id}/delete",path:{proof_id:e},errors:{404:"Not Found",500:"Internal Server Error"}})}};var ie=class{constructor(e){this.httpRequest=e}jwtTokenVerify(e){return this.httpRequest.request({method:"POST",url:"/api/token/verify",body:e,mediaType:"application/json"})}jwtTokenGenerate(e){return this.httpRequest.request({method:"POST",url:"/api/token/pair",body:e,mediaType:"application/json",errors:{403:"Forbidden"}})}jwtTokenRefresh(e){return this.httpRequest.request({method:"POST",url:"/api/token/refresh",body:e,mediaType:"application/json"})}};var ne=class{authorization;circuits;internal;proofs;token;request;constructor(e,o=ge){this.request=new o({BASE:e?.BASE??"https://sindri.app",VERSION:e?.VERSION??"1.12.21",WITH_CREDENTIALS:e?.WITH_CREDENTIALS??!1,CREDENTIALS:e?.CREDENTIALS??"include",TOKEN:e?.TOKEN,USERNAME:e?.USERNAME,PASSWORD:e?.PASSWORD,HEADERS:e?.HEADERS,ENCODE_PATH:e?.ENCODE_PATH}),this.authorization=new ee(this.request),this.circuits=new te(this.request),this.internal=new re(this.request),this.proofs=new oe(this.request),this.token=new ie(this.request)}};var V=y(require("fs")),_e=y(require("path")),rt=y(require("env-paths")),W=y(require("lodash")),N=require("zod"),ot=()=>{let t=(0,rt.default)("sindri",{suffix:""});return _e.default.join(t.config,"sindri.conf.json")},$e=N.z.object({auth:N.z.nullable(N.z.object({apiKey:N.z.string(),apiKeyId:N.z.string(),apiKeyName:N.z.string(),baseUrl:N.z.string().url(),teamId:N.z.number(),teamSlug:N.z.string()})).default(null)}),Cr=$e.parse({}),wr=t=>{let e=ot();if(V.default.existsSync(e)){t?.debug(`Loading config from "${e}".`);try{let o=V.default.readFileSync(e,{encoding:"utf-8"}),n=$e.parse(JSON.parse(o));return t?.debug("Config loaded successfully."),n}catch(o){t?.warn(`The config schema in "${e}" is invalid and will not be used.
To remove it and start fresh, run:
    rm ${e}`),t?.debug(o)}}return t?.debug(`Config file "${e}" does not exist, initializing default config.`),W.default.cloneDeep(Cr)},q=class{_config;logger;constructor(e){this.logger=e,this.reload()}get auth(){return W.default.cloneDeep(this._config.auth)}get config(){return W.default.cloneDeep(this._config)}reload(){this._config=wr(this.logger)}update(e){this.logger?.debug("Merging in config update:"),this.logger?.debug(e);let o=W.default.cloneDeep(this._config);W.default.merge(o,e),this._config=$e.parse(o);let n=ot(),i=_e.default.dirname(n);V.default.existsSync(i)||V.default.mkdirSync(i,{recursive:!0}),this.logger?.debug(`Writing merged config to "${n}":`,this._config),V.default.writeFileSync(n,JSON.stringify(this._config,null,2),{encoding:"utf-8"})}};var it=y(require("pino")),nt=y(require("pino-pretty")),De=t=>{let e=(0,it.default)(process.env.BROWSER_BUILD?{browser:{asObject:!0}}:(0,nt.default)({colorize:!0,destination:2,ignore:"hostname,pid",levelFirst:!1,sync:!0}));return e.level=t??!0?"silent":"info",e},qo=De(),L=console.log;var M=null;function se({cache:t=!0,logger:e,raiseExceptions:o=!1}={}){if(t&&M)return M;if(process.env.BROWSER_BUILD)return M={};let{SINDRI_META:n}=process.env;if(!n)return M={};let i=([c,a])=>{if(typeof a!="string"){let p=`Invalid metadata entry for '${c}' (value must be a string).`;if(o)throw new Error(p);return e?.warn({key:c,value:a,SINDRI_META:n},p+" Ignoring."),!1}let f=he(c,a);if(f){if(o)throw new Error(f);return e?.warn({key:c,value:a,SINDRI_META:n},f+" Ignoring."),!1}return!0};if(n.startsWith("{"))try{return M=Object.fromEntries(Object.entries(JSON.parse(n)).filter(i))}catch(c){let a="Failed to parse 'SINDRI_META' as JSON.";if(o)throw new Error(a);return e?.warn({SINDRI_META:n,error:c.toString()},a+" Using '{}' as the default."),M={}}let s="\0";return M=Object.fromEntries(n.replace(/::/g,s).split(":").map(c=>c.replace(new RegExp(s,"g"),":")).filter(c=>{if(!c.includes("=")){let a=`Invalid 'SINDRI_META' metadata segment '${c}' (missing '=', try 'key=value').`;if(o)throw new Error(a);return e?.warn({segment:c,SINDRI_META:n},a+" Ignoring."),!1}return!0}).map(c=>{let a=c.indexOf("=");return[c.slice(0,a),c.slice(a+1)]}).filter(i))}function qe(t){let e=se({raiseExceptions:!0});return Object.entries(t).forEach(([o,n])=>{let i=he(o,n);if(i)throw new Error(i)}),{...e,...t}}function he(t,e){let c=/^[a-zA-Z][a-zA-Z0-9_-]*$/;return t.length<1||t.length>64?`Invalid metadata key length for '${t}' (must be 1-64 characters).`:c.test(t)?e.length<0||e.length>4096?`Invalid metadata value length for '${t}' (must be 0-4096 characters).`:null:`Invalid metadata key for '${t}' (must start with an alphabet character and only include alphanumeric characters, underscores, and hyphens).`}var be=class t{_client;_clientConfig;_config;logger;pollingInterval=1e3;retryOptions={minTimeout:1e3,retries:6};constructor(e={},{retryOptions:o}={}){this._client=new ne,this._clientConfig=this._client.request.config;let n="v0.0.1-alpha.61";this._clientConfig.HEADERS={...this._clientConfig.HEADERS,"Sindri-Client":`sindri-js-sdk/${n}`},this.logger=De(),process.env.BROWSER_BUILD||(this._config=new q(this.logger)),this._clientConfig.sindri=this,this.authorize(e),o&&(this.retryOptions=structuredClone(o))}get apiKey(){return this._clientConfig.TOKEN&&typeof this._clientConfig.TOKEN!="string"?null:this._clientConfig.TOKEN||null}get baseUrl(){return this._clientConfig.BASE}get logLevel(){return this.logger.level}set logLevel(e){this.logger.level=e,this.logger.debug(`Set log level to "${this.logger.level}".`)}authorize(e){return process.env.BROWSER_BUILD?(this._clientConfig.BASE=e.baseUrl||"https://sindri.app",this._clientConfig.TOKEN=e.apiKey):(this._config.reload(),this._clientConfig.BASE=e.baseUrl||process.env.SINDRI_BASE_URL||this._config.auth?.baseUrl||this._clientConfig.BASE||"https://sindri.app",this._clientConfig.TOKEN=e.apiKey||process.env.SINDRI_API_KEY||this._config.auth?.apiKey),!!(this._clientConfig.BASE&&this._clientConfig.TOKEN)}create(e,o){return new t(e,o)}async createCircuit(e,o=["latest"],n={}){let i=new K;o=typeof o=="string"?[o]:o??[];for(let p of o){if(!/^[-a-zA-Z0-9_.]+$/.test(p))throw new Error(`"${p}" is not a valid tag. Tags may only contain alphanumeric characters, underscores, hyphens, and periods.`);i.append("tags",p)}if(o.length===0&&i.append("tags",""),i.append("meta",JSON.stringify(qe(n))),typeof e=="string"){if(process.env.BROWSER_BUILD)throw new Error("Specifying `project` as a path is not allowed in the browser build.");let p;try{p=await(0,ae.stat)(e)}catch{throw new Error(`The "${e}" path does not exist or you do not have permission to access it.`)}if(p.isFile()){if(!/\.(zip|tar|tar\.gz|tgz)$/i.test(e))throw new Error("Only gzipped tarballs or zip files are supported.");let u=ye.default.basename(e),d=await(0,ae.readFile)(e);i.append("files",new Q([d],u))}else if(p.isDirectory()){let u=ye.default.join(e,"sindri.json"),d;try{d=await(0,ae.readFile)(u,{encoding:"utf-8"})}catch{throw new Error(`Expected Sindri manifest file at "${u}" does not exist.`)}let g;try{g=JSON.parse(d)}catch{throw new Error(`Could not parse "${u}", is it valid JSON?`)}let l=g?.name;if(!l)throw new Error(`No circuit "name" field was found in "${u}", the manifest is invalid.`);let h=at.default.sync({follow:!0,ignoreFiles:[".sindriignore"],path:e}).filter(R=>!/(^|\/)\.git(\/|$)/.test(R)),m=ye.default.basename(u);h.includes(m)||h.push(m);let b=`${l}.tar.gz`;h.sort((R,P)=>R.localeCompare(P));let w=ct.default.c({cwd:e,gzip:!0,onwarn:(R,P)=>{this.logger.warn(`While creating tarball: ${R} - ${P}`)},prefix:`${l}/`,sync:!0},h);i.append("files",new Q([w.read()],b))}else throw new Error(`The "${e}" path is not a file or directory.`)}else if(Array.isArray(e)){if(!e.every(m=>m instanceof Q))throw new Error("All entries in `project` must be `File` instances.");let p=e.find(m=>m.name==="sindri.json");if(!p)throw new Error("The `project` array must include a `sindri.json` file.");let u;try{u=JSON.parse(await p.text())}catch{throw new Error('Could not parse "sindri.json", is it valid JSON?')}let d=u?.name;if(!d)throw new Error('No circuit "name" field was found in "sindri.json", the manifest is invalid.');let g=new lt.default;e.sort((m,b)=>m.name.localeCompare(b.name));for(let m of e){let b=new Uint8Array(await m.arrayBuffer());await new Promise(w=>g.append(`${d}/${m.name}`,b,w))}let l=new Uint8Array(st.default.zip(g.out)),h=new Q([l],`${d}.tar.gz`);process.env.BROWSER_BUILD,i.append("files",h)}let s=this._clientConfig.HEADERS;this._clientConfig.HEADERS={...s,"Content-Type":"multipart/form-data; boundary=----WebKitFormBoundary0buQ8d6EhWcs9X9d"};let a=await this._client.circuits.circuitCreate(i);this._clientConfig.HEADERS=s;let f=a.circuit_id;for(;;){let p=await this._client.internal.circuitStatus(f);if(p.status==="Ready"||p.status==="Failed")break;await new Promise(u=>setTimeout(u,this.pollingInterval))}return this._client.circuits.circuitDetail(f,!1)}async getAllCircuitProofs(e){return await this._client.circuits.circuitProofs(e)}async getAllCircuits(){return await this._client.circuits.circuitList()}async getCircuit(e){return await this._client.circuits.circuitDetail(e)}async getProof(e){return await this._client.proofs.proofDetail(e)}async proveCircuit(e,o,n=!1,i=!1,s={}){let a=(await this._client.circuits.proofCreate(e,{meta:qe(s),perform_verify:n,proof_input:o})).proof_id;for(;;){let f=await this._client.internal.proofStatus(a);if(f.status==="Ready"||f.status==="Failed")break;await new Promise(p=>setTimeout(p,this.pollingInterval))}return this._client.proofs.proofDetail(a,!0,!0,i,!0)}};var r=new be;var ft=new mt.Command().name("clone").description("Clone a circuit into a local directory.").argument("<circuit>","The circuit to clone.").argument("[directory]","The directory to clone the circuit into.").action(async(t,e)=>{let n=/^(?:([-a-zA-Z0-9_]+)\/)?([-a-zA-Z0-9_]+)(?::([-a-zA-Z0-9_.]+))?$/.exec(t);if(!n)return r.logger.error(`"${t}" is not a valid circuit identifier.`),j.default.exit(1);(0,pt.default)(n[2],"The circuit name must be provided.");let i=n[2],s=ut.default.resolve(e??i);if(Le.default.existsSync(s))return r.logger.error(`The directory "${s}" already exists. Aborting.`),j.default.exit(1);if(!r.apiKey||!r.baseUrl)return r.logger.warn("You must login first with `sindri login`."),j.default.exit(1);let c;r.logger.info(`Cloning the circuit "${t}" into "${s}".`);try{c=await r._client.internal.circuitDownload(t)}catch(a){return a instanceof I&&a.status===401?(r.logger.error("Your credentials are invalid. Please log in again with `sindri login`."),j.default.exit(1)):a instanceof I&&a.status===404?(r.logger.error(`The circuit "${t}" does not exist or you lack permission to access it.`),j.default.exit(1)):(r.logger.fatal("An unknown error occurred."),r.logger.error(a),j.default.exit(1))}try{Le.default.mkdirSync(s,{recursive:!0})}catch(a){return r.logger.fatal(`Failed to create the directory "${s}". Aborting.`),r.logger.error(a),j.default.exit(1)}await new Promise((a,f)=>{c.on("end",a),c.on("error",f),c.pipe(dt.default.x({cwd:s,noChmod:!0,noMtime:!0,onwarn:(p,u)=>{r.logger.warn(`While extracting tarball: ${p} - ${u}`)},preserveOwner:!1,preservePaths:!1,strip:1}))}),r.logger.info("Circuit cloned successfully.")});var je=require("@commander-js/extra-typings");var Sr=new je.Command().name("list").description("Show the current config.").action(async()=>{r._config.reload(),L(r._config.config)}),gt=new je.Command().name("config").description("Commands related to configuration and config files.").addCommand(Sr);var vt=y(require("assert")),Se=y(require("path")),$=y(require("process")),Ie=require("@commander-js/extra-typings");var ht=y(require("assert")),Be=require("child_process"),G=require("fs"),x=require("fs/promises"),yt=y(require("os")),E=y(require("path")),v=y(require("process")),bt=require("stream"),Rt=require("url"),Ct=y(require("axios")),wt=require("compare-versions"),Re=y(require("dockerode")),St=y(require("nunjucks"));var Pr=(0,Rt.fileURLToPath)(C),Ir=E.default.dirname(Pr);function vr(t){return new Promise(e=>{let o=(0,Be.spawn)(t,["--version"]);o.on("error",()=>{e(!1)}),o.on("exit",n=>{e(n!==127&&n!==null)})})}async function Me(t){let e=new Re.default;try{await e.ping()}catch(o){return t?.debug("Failed to connect to the Docker daemon."),t?.debug(o),!1}return t?.debug("Docker daemon is accessible."),!0}function xr(t,e,o){let n=t.indexOf("=");n===-1&&(o.fatal(`Invalid metadata segment '${t}' (missing '=', try 'key=value'). Aborting.`),v.default.exit(1));let[i,s]=[t.slice(0,n),t.slice(n+1)],c=he(i,s);return c&&(o.fatal({key:i,value:s},`Invalid metadata entry '${t}'. ${c} Aborting.`),v.default.exit(1)),{...e,[i]:s}}var Ce=t=>(e,o)=>xr(e,o,t),Er=new bt.Writable({write(t,e,o){o()}});async function He(t,e=[],{cwd:o=v.default.cwd(),docker:n=new Re.default,logger:i,rootDirectory:s,tag:c="auto",tty:a=!1}){if(Je(v.default.env.SINDRI_FORCE_DOCKER??"false"))i?.debug(`Forcing docker usage for command "${t}" because "SINDRI_FORCE_DOCKER" is set to "${v.default.env.SINDRI_FORCE_DOCKER}".`);else{if(await vr(t))return i?.debug({args:e,command:t},`Executing the "${t}" command locally.`),{code:await Tr(t,e,{cwd:o,logger:i,tty:a}),method:"local"};i?.debug(`The "${t}" command was not found locally, trying Docker instead.`)}return await Me(i)?(i?.debug({args:e,command:t},`Executing the "${t}" command in a Docker container.`),{code:await we(t,e,{cwd:o,docker:n,logger:i,rootDirectory:s,tag:c,tty:a}),method:"docker"}):(i?.debug(`The "${t}" command is not available locally or in Docker.`),{code:null,method:null})}async function we(t,e=[],{cwd:o=v.default.cwd(),docker:n=new Re.default,logger:i,rootDirectory:s,tag:c="auto",tty:a=!1}){let f=O(/^sindri.json$/i,o);s||(f?s=E.default.dirname(f):(s=o,i?.warn(`No "sindri.json" file was found in or above "${o}", using the current directory as the project root.`))),s=E.default.normalize(E.default.resolve(s));let p;if(t==="nargo"&&c==="auto"){let h="latest";if(f)try{let m=await(0,x.readFile)(f,{encoding:"utf-8"}),b=JSON.parse(m);b.noirVersion&&(h=b.noirVersion,h&&!h.startsWith("v")&&(h=`v${h}`))}catch(m){i?.error(`Failed to parse the "${f}" file, using the "latest" tag for the "nargo" command.`),i?.debug(m)}else i?.warn(`No "sindri.json" file was found in or above "${o}", using the "latest" tag for the "nargo" command.`);p=`sindrilabs/${t}:${h}`}else if(["circomspect","nargo"].includes(t))p=`sindrilabs/${t}:${c==="auto"?"latest":c}`;else throw new Error(`The command "${t}" is not supported.`);i?.debug(`Pulling the "${p}" image.`);try{await new Promise((h,m)=>{n.pull(p,(b,w)=>{b?m(b):n.modem.followProgress(w,(R,P)=>R?m(R):h(P))})})}catch(h){return i?.error(`Failed to pull the "${p}" image.`),i?.error(h),v.default.exit(1)}let u=s;if(v.default.env.SINDRI_DEVELOPMENT_HOST_ROOT)if(s==="/sindri"||s.startsWith("/sindri/"))u=s.replace("/sindri",v.default.env.SINDRI_DEVELOPMENT_HOST_ROOT),i?.debug(`Remapped "${s}" to "${u}" for bind mount on the Docker host.`);else return i?.fatal(`The root directory path "${s}" must be under "/sindri/"when using "SINDRI_DEVELOPMENT_HOST_ROOT".`),v.default.exit(1);let d=E.default.relative(s,o),g;return d.startsWith("..")?(g="/sindri/",i?.warn(`The current working directory ("${o}") is not under the project root ("${s}"), will use the project root as the current working directory.`)):g=E.default.join("/sindri/",d),i?.debug(`Remapped the "${o}" working directory to "${g}" in the Docker container.`),(await new Promise((h,m)=>{n.run(p,e,a?[v.default.stdout,v.default.stderr]:Er,{AttachStderr:a,AttachStdin:a,AttachStdout:a,HostConfig:{Binds:[`${u}:/sindri`,"/tmp/sindri/:/tmp/sindri/"]},OpenStdin:a,StdinOnce:!1,Tty:a,WorkingDir:g},(b,w)=>{b?m(b):h(w)}).on("container",b=>{if(!a)return;let w=b.attach({stream:!0,stdin:!0,stdout:!0,stderr:!0},function(R,P){R&&m(R),P.pipe(v.default.stdout)});w&&w.resume()})})).StatusCode}async function Tr(t,e=[],{cwd:o=v.default.cwd(),logger:n,tty:i=!1}){let s=(0,Be.spawn)(t,e,{cwd:o,stdio:i?"inherit":"ignore"});try{return await new Promise((a,f)=>{s.on("error",p=>{f(p)}),s.on("close",(p,u)=>{p==null&&u!=null&&(p=128+yt.default.constants.signals[u]),(0,ht.default)(p!=null),a(p)})})}catch(c){return n?.error(`Failed to execute the "${t}" command.`),n?.error(c),v.default.exit(1)}}async function Fe(t){try{return await(0,x.access)(t,G.constants.F_OK),!0}catch{return!1}}function O(t,e=Ir){let o=(0,G.readdirSync)(e);for(let i of o)if(typeof t=="string"?i===t:t.test(i))return E.default.join(e,i);let n=E.default.dirname(e);return n===e?null:O(t,n)}async function Pt(t,e="sindrilabs"){let o=`https://hub.docker.com/v2/repositories/${e}/${t}/tags/?page_size=1`,n=[];for(;o;){let i=await Ct.default.get(o);n=n.concat(i.data.results),o=i.data.next}return n.filter(({tag_status:i})=>i==="active").filter(({name:i})=>i!=="dev").sort((i,s)=>i.last_updated.localeCompare(s.last_updated)).map(({name:i})=>i).sort((i,s)=>i==="latest"?1:s==="latest"?-1:(0,wt.compareVersions)(i,s))}function Je(t){return["1","true","t","yes","y","on"].includes(t.toLowerCase())}function It(){let t=O("sindri-manifest.json");if(!t)throw new Error("A `sindri-manifest.json` file was unexpectedly not found.");let e=(0,G.readFileSync)(t,{encoding:"utf-8"});return JSON.parse(e)}async function Ue(t,e,o,n){let i=E.default.resolve(e);await Fe(i)||await(0,x.mkdir)(i,{recursive:!0});let s=O("templates");if(!s)throw new Error("Root template directory not found.");let c=E.default.isAbsolute(t)?t:E.default.resolve(s,t);if(!await Fe(c))throw new Error(`The "${c}" directory does not exist.`);let a=(p,u)=>{let d=p;return Object.entries(u).forEach(([g,l])=>{typeof l=="string"&&(d=d.replace(new RegExp(`template${g.toUpperCase()}`,"gi"),l))}),St.default.renderString(d,u)},f=async(p,u)=>{if((await(0,x.stat)(p)).isDirectory()){if(await Fe(u)||(await(0,x.mkdir)(u,{recursive:!0}),n?.debug(`Created directory: "${u}"`)),!(await(0,x.stat)(u)).isDirectory())throw new Error(`"File ${u} exists and is not a directory.`);let l=await(0,x.readdir)(p);await Promise.all(l.map(async h=>{let m=a(h,o);await f(E.default.join(p,h),E.default.join(u,m))}));return}let d=await(0,x.readFile)(p,{encoding:"utf-8"}),g=a(d,o);await(0,x.writeFile)(u,g,{encoding:"utf-8"}),n?.debug(`Rendered "${p}" template to "${u}".`)};await f(c,i)}var Pe,Y,ze,Ar=new Ie.Command().name("circomspect").description("Trail of Bit's Circomspect static analysis tool for Circom circuits.").helpOption(!1).addHelpCommand(!1).allowUnknownOption().passThroughOptions().argument("[args...]","Arguments to pass to the tool.").action(async t=>{if(!Pe)try{let e=await we("circomspect",t,{logger:r.logger,rootDirectory:Y,tag:ze,tty:!0});$.default.exit(e)}catch(e){return r.logger.error("Failed to run the circomspect command."),r.logger.debug(e),$.default.exit(1)}}),Or=new Ie.Command().name("nargo").description("Aztec Lab's Noir compiler and package manager.").helpOption(!1).addHelpCommand(!1).allowUnknownOption().passThroughOptions().argument("[args...]","Arguments to pass to the tool.").action(async t=>{if(!Pe)try{let e=await we("nargo",t,{logger:r.logger,rootDirectory:Y,tag:ze,tty:!0});$.default.exit(e)}catch(e){return r.logger.error("Failed to run the nargo command."),r.logger.debug(e),$.default.exit(1)}}),xt=new Ie.Command().name("exec").alias("x").description("Run a ZKP tool in your project root inside of an optimized docker container.").passThroughOptions().option("-l, --list-tags","List the available docker image tags for a given tool.").option("-t, --tag <tag>","The version tag of the docker image to use.","auto").addCommand(Ar).addCommand(Or).hook("preAction",async t=>{let e=t.opts();if(Pe=!!e.listTags,ze=e.tag,Pe){let i=t.args[0];(0,vt.default)(i,"The preAction hook should only run if there's a subcommand.");try{(await Pt(i)).forEach(c=>L(c))}catch(s){return r.logger.fatal("Error listing available docker image tags."),r.logger.error(s),$.default.exit(1)}return $.default.exit(0)}let o=$.default.cwd(),n=O(/^sindri.json$/i,o);n?Y=Se.default.dirname(n):(Y=o,r.logger.warn(`No "sindri.json" file was found in or above "${o}", using the current directory as the project root.`)),Y=Se.default.normalize(Se.default.resolve(Y)),await Me(r.logger)||(r.logger.fatal(`Docker is either not installed or the daemon isn't currently running, but it is required by "sindri exec".
Please install Docker by following the instructions at: https://docs.docker.com/get-docker/`),$.default.exit(1))});var H=require("child_process"),k=require("fs"),ce=y(require("path")),ve=y(require("process")),Et=require("@commander-js/extra-typings"),S=require("@inquirer/prompts");var Tt=new Et.Command().name("init").description("Initialize a new Sindri project.").argument("[directory]","The directory where the new project should be initialized.",".").action(async t=>{let e=ce.default.resolve(t),o=ce.default.basename(e);if(!(0,k.existsSync)(e))(0,k.mkdirSync)(e,{recursive:!0});else if(!(0,k.statSync)(e).isDirectory())return r.logger.warn(`File "${e}" exists and is not a directory, aborting.`),ve.default.exit(1);if((0,k.readdirSync)(e).length>0&&!await(0,S.confirm)({message:`The "${e}" directory already exists and contains files. Continuing will overwrite your existing files. Are you *SURE* you would like to proceed?`,default:!1}))return r.logger.info("Aborting."),ve.default.exit(1);let i=await(0,S.input)({message:"Circuit Name:",default:o.replace(/[^-a-zA-Z0-9_]/g,"-"),validate:d=>d.length===0?"You must specify a circuit name.":/^[-a-zA-Z0-9_]+$/.test(d)?!0:"Only alphanumeric characters, hyphens, and underscores are allowed."}),s=await(0,S.select)({message:"Proving Framework:",default:"circom",choices:[{name:"Circom",value:"circom"},{name:"Gnark",value:"gnark"},{name:"Halo2",value:"halo2"},{name:"Noir",value:"noir"}]}),c={circuitName:i,circuitType:s},a=s;if(s==="circom"){let d=await(0,S.select)({message:"Proving Scheme:",default:"groth16",choices:[{name:"Groth16",value:"groth16"}]}),g=await(0,S.select)({message:"Curve Name:",default:"bn254",choices:[{name:"BN254",value:"bn254"}]}),l=await(0,S.select)({message:"Witness Compiler:",default:"c++",choices:[{name:"C++",value:"c++"},{name:"Wasm",value:"wasm"}]});Object.assign(c,{curveName:g,provingScheme:d,witnessCompiler:l})}else if(s==="gnark"){let d=await(0,S.input)({message:"Go Package Name:",default:i.replace(/[^a-zA-Z0-9]/g,"").replace(/^[^a-z]*/g,""),validate:m=>m.length===0?"You must specify a package name.":/^[a-z][a-z0-9]*$/.test(m)?!0:"Package names must begin with a lowercase letter and only be followed by alphanumeric characters."}),g=await(0,S.select)({message:"Proving Scheme:",default:"groth16",choices:[{name:"Groth16",value:"groth16"},{name:"PlonK",value:"plonk"}]}),l=await(0,S.select)({message:"Curve Name:",default:"bn254",choices:[{name:"BN254",value:"bn254"},{name:"BLS12-377",value:"bls12-377"},{name:"BLS12-381",value:"bls12-381"},{name:"BLS24-315",value:"bls24-315"},{name:"BW6-633",value:"bw6-633"},{name:"BW6-761",value:"bw6-761"}]}),h=l.toUpperCase().replace("-","_");Object.assign(c,{curveName:l,gnarkCurveName:h,packageName:d,provingScheme:g})}else if(s==="halo2"){let d=await(0,S.select)({message:"Halo2 Base Version:",default:"axiom-v0.3.0",choices:[{name:"Axiom v0.3.0",value:"axiom-v0.3.0"},{name:"PSE v0.3.0",value:"pse-v0.3.0"}]}),g=await(0,S.input)({message:"Halo2 Package Name:",default:i.toLowerCase().replace(/^[^a-z0-9_]+/,"_").replace(/_+/g,"_").replace(/-+/g,"-"),validate:w=>w.length===0?"You must specify a package name.":/^[a-z0-9_]+(?:-[a-z0-9_]+)*$/.test(w)?!0:"Package names must begin with a lowercase letter, number, or underscore, and only be followed by lowercase or numeric characters and underscores (optionally separated hyphens)."}),l=parseInt(await(0,S.input)({message:"Degree:",default:"13",validate:w=>w.length===0?"You must specify a degree.":/^[1-9]\d*$/.test(w)?!0:"Degree must be a positive integer."}),10),h=d==="axiom-v0.3.0"?await(0,S.select)({message:"Halo2 Base Version:",default:"GateThreadBuilder",choices:[{name:"Gate Thread Builder",value:"GateThreadBuilder"}]}):void 0,m=d!=="axiom-v0.3.0"?"::circuit::EqualCircuit":"::circuit_def::CircuitInput",b=`${g.replace(/-/g,"_")}${m}`;a=`${a}/${d}`,Object.assign(c,{className:b,halo2Version:d,degree:l,packageName:g,threadBuilder:h})}else if(s==="noir"){let d=await(0,S.input)({message:"Noir Package Name:",default:i.toLowerCase().replace(/[- ]/g,"_").replace(/[^a-zA-Z0-9_]+/,"").replace(/_+/g,"_"),validate:h=>h.length===0?"You must specify a package name.":/^[a-zA-Z0-9_]+$/.test(h)?!0:"Package names must only contain alphanumeric characters and underscores."}),g=await(0,S.select)({message:"Noir Version:",default:"0.23.0",choices:[{name:"0.17.0",value:"0.17.0"},{name:"0.18.0",value:"0.18.0"},{name:"0.19.4",value:"0.19.4"},{name:"0.22.0",value:"0.22.0"},{name:"0.23.0",value:"0.23.0"}]}),l=await(0,S.select)({message:"Proving Scheme:",default:"barretenberg",choices:[{name:"Barretenberg",value:"barretenberg"}]});Object.assign(c,{packageName:d,noirVersion:g,provingScheme:l})}else return r.logger.fatal(`Sorry, ${s} is not yet supported.`),ve.default.exit(1);r.logger.info(`Proceeding to generate scaffolded project in "${e}".`),await Ue("common",e,c,r.logger),await Ue(a,e,c,r.logger);let f=ce.default.join(e,".gitkeep");if((0,k.existsSync)(f)&&(0,k.rmSync)(f),r.logger.info("Project scaffolding successful."),s==="circom"){let d=!1;try{(0,H.execSync)("npm --version"),d=!0}catch{r.logger.warn("NPM is not installed, cannot install circomlib as a dependency. You will need to install NPM and run `npm install` yourself.")}d&&(r.logger.info("Installing circomlib."),(0,H.execSync)("npm install",{cwd:e}))}let p=!1;try{(0,H.execSync)("git --version"),p=!0}catch{r.logger.debug("Git is not installed, skipping git initialization questions.")}let u=(0,k.existsSync)(ce.default.join(e,".git"));if(p&&!u&&await(0,S.confirm)({message:`Would you like to initialize a git repository in "${e}"?`,default:!0})){r.logger.info(`Initializing git repository in "${e}".`);try{(0,H.execSync)("git init .",{cwd:e}),(0,H.execSync)("git add .",{cwd:e}),(0,H.execSync)("git commit -m 'Initial commit.'",{cwd:e}),r.logger.info("Successfully initialized git repository.")}catch(g){r.logger.error("Error occurred while initializing the git repository.");let l=g;["output","stderr","stdout"].forEach(m=>{m in l&&(l[m]="<truncated>")}),r.logger.error(l)}}});var At=y(require("assert")),Ot=require("buffer"),Ee=require("fs"),xe=y(require("path")),A=y(require("process")),kt=require("@commander-js/extra-typings"),Nt=require("formdata-node"),_t=y(require("ignore-walk")),$t=y(require("tar"));function kr(t,e){let o=e.isNotDefault?e.concat([t]):[t];return o.isNotDefault=!0,o}var Dt=new kt.Command().name("deploy").description("Deploy the current Sindri project.").option("-m, --meta <key=value>","Metadata key/value to attach to the circuit build.",Ce(r.logger),se({logger:r.logger,raiseExceptions:!1})).option("-t, --tag <tag>","Tag to apply to the circuit.",kr,["latest"]).option("-u, --untagged","Discard the current circuit after compiling.").argument("[directory]","The location of the Sindri project to deploy.",".").action(async(t,{meta:e,tag:o,untagged:n})=>{if(n){if(o.length!==1||o[0]!=="latest"||o.isNotDefault)return r.logger.error("You cannot use both the `--tag` and `--untagged` options together."),A.default.exit(1)}else for(let m of o)if(!/^[-a-zA-Z0-9_.]+$/.test(m))return r.logger.error(`"${m}" is not a valid tag. Tags may only contain alphanumeric characters, underscores, hyphens, and periods.`),A.default.exit(1);let i=xe.default.resolve(t);if(!(0,Ee.existsSync)(i))return r.logger.error(`The "${i}" directory does not exist. Aborting.`),A.default.exit(1);let s=O(/^sindri.json$/i,i);if(!s)return r.logger.error(`No "sindri.json" file was found in or above "${i}". Aborting.`),A.default.exit(1);r.logger.debug(`Found "sindri.json" at "${s}".`);let c=xe.default.dirname(s);r.logger.debug(`Changing current directory to "${c}".`),A.default.chdir(c);let a={};try{let m=(0,Ee.readFileSync)(s,{encoding:"utf-8"});a=JSON.parse(m),r.logger.debug(`Successfully loaded "sindri.json" from "${s}":`),r.logger.debug(a)}catch(m){return r.logger.fatal(`Error loading "${s}", perhaps it is not valid JSON?`),r.logger.error(m),A.default.exit(1)}if(!("name"in a))return r.logger.error('No "name" field found in "sindri.json". Aborting.'),A.default.exit(1);let f=a.name;if(!r.apiKey||!r.baseUrl)return r.logger.warn("You must login first with `sindri login`."),A.default.exit(1);let p=_t.default.sync({follow:!0,ignoreFiles:[".sindriignore"],path:"."}).filter(m=>!/(^|\/)\.git(\/|$)/.test(m)),u=xe.default.basename(s);p.includes(u)||p.push(u);let d=new Nt.FormData,g=`${f}.tar.gz`;if(r.logger.info(`Creating "${g}" package with ${p.length} files.`),d.append("files",new Ot.Blob([$t.default.c({gzip:!0,onwarn:(m,b)=>{r.logger.warn(`While creating tarball: ${m} - ${b}`)},prefix:`${f}/`,sync:!0},p).read()]),g),d.append("meta",JSON.stringify(e)),n)d.append("tags","");else for(let m of o)d.append("tags",m);let l;try{r.logger.info("Circuit compilation initiated."),l=(await r._client.circuits.circuitCreate(d)).circuit_id}catch(m){if(m instanceof I&&m.status===401)r.logger.error("Your credentials are invalid. Please log in again with `sindri login`.");else return r.logger.fatal("An unknown error occurred."),r.logger.error(m),A.default.exit(1)}if(!l)return r.logger.error("No circuit ID was returned from the API. Aborting."),A.default.exit(1);let h=Date.now();for(;;){try{r.logger.debug("Polling for circuit compilation status.");let m=await r._client.internal.circuitStatus(l),b=["Failed","Ready"].includes(m.status)?await r._client.circuits.circuitDetail(l,!1):null,w=((Date.now()-h)/1e3).toFixed(1);if(m.status==="Ready"){r.logger.info(`Circuit compiled successfully after ${w} seconds.`);break}else{if(m.status==="Failed")return(0,At.default)(b!=null),r.logger.error(`Circuit compilation failed after ${w} seconds: `+(b.error??"Unknown error.")),A.default.exit(1);m.status==="Queued"?r.logger.debug("Circuit compilation is queued."):m.status==="In Progress"&&r.logger.debug("Circuit compilation is in progress.")}}catch(m){return r.logger.fatal("An unknown error occurred while polling for compilation to finish."),r.logger.error(m),A.default.exit(1)}await new Promise(m=>setTimeout(m,1e3))}});var qt=y(require("assert")),Lt=require("crypto"),F=require("fs"),J=y(require("path")),_=y(require("process")),jt=require("@commander-js/extra-typings"),Ft=require("jsonschema");var Bt=new jt.Command().name("lint").description("Lint the current Sindri project for potential issues.").argument("[directory]","The directory, or subdirectory, of the project to lint.",".").action(async t=>{let e=0,o=0,n;try{if(n=It(),!n)throw new Error('No "sindri-manifest.json" file found.');r.logger.debug('Successfully loaded "sindri-manifest.json".')}catch{return r.logger.error('No "sindri-manifest.json" JSON Schema file found. Aborting.'),_.default.exit(1)}let i=J.default.resolve(t);if(!(0,F.existsSync)(i))return r.logger.error(`The "${i}" directory does not exist. Aborting.`),_.default.exit(1);let s=O(/^sindri.json$/i,i);if(!s)return r.logger.error(`No "sindri.json" file was found in or above "${i}". Aborting.`),_.default.exit(1);r.logger.debug(`Found "sindri.json" at "${s}".`);let c=J.default.dirname(s);r.logger.debug(`Changing current directory to "${c}".`),_.default.chdir(i);let a={};try{let l=(0,F.readFileSync)(s,{encoding:"utf-8"});a=JSON.parse(l),r.logger.debug(`Successfully loaded "sindri.json" from "${s}":`),r.logger.debug(a)}catch(l){return r.logger.fatal(`Error loading "${s}", perhaps it is not valid JSON?`),r.logger.error(l),_.default.exit(1)}(0,qt.default)(Array.isArray(n.anyOf));let f;!("circuitType"in a)||!a.circuitType?f=void 0:a.circuitType==="circom"?f=n.anyOf.find(l=>/circom/i.test(l.$ref??"")):a.circuitType==="gnark"?f=n.anyOf.find(l=>/gnark/i.test(l.$ref??"")):a.circuitType==="halo2"?"halo2Version"in a&&a.halo2Version==="axiom-v0.2.2"?f=n.anyOf.find(l=>/halo2axiomv022/i.test(l.$ref??"")):"halo2Version"in a&&a.halo2Version==="axiom-v0.3.0"?f=n.anyOf.find(l=>/halo2axiomv030/i.test(l.$ref??"")):f={anyOf:n.anyOf.filter(l=>/halo2/i.test(l.$ref??""))}:a.circuitType==="noir"&&(f=n.anyOf.find(l=>/noir/i.test(l.$ref??""))),f?(delete n.anyOf,n={...n,...f}):(r.logger.warn(`Circuit type is not configured in "${s}" so some linting steps will be skipped and the manifest linting output will be very noisy. Please correct "circuiType" in "sindri.json" and rerun "sindri lint" to get better linting.`),o+=1);let p="circuitType"in a&&typeof a.circuitType=="string"&&["circom","gnark","halo2","noir"].includes(a.circuitType)?a.circuitType:null;p?r.logger.debug(`Detected circuit type "${p}".`):r.logger.debug("No circuit type detected!");let d=new Ft.Validator().validate(a,n,{nestedErrors:!0});if(d.valid)r.logger.info(`Sindri manifest file "${s}" is valid.`);else{r.logger.warn(`Sindri manifest file "${s}" contains errors:`);for(let l of d.errors){let h=l.property.replace(/^instance/,"sindri.json").replace(/\./g,":")+(typeof l.schema=="object"&&l.schema.title?`:${l.schema.title}`:"");r.logger.error(`${h} ${l.message}`),e+=1}}let g=J.default.join(c,"README.md");if((0,F.existsSync)(g)?r.logger.debug(`README file found at "${g}".`):(r.logger.warn(`No project README was found at "${g}", consider adding one.`),o+=1),p==="circom"&&Je(_.default.env.SINDRI_LINT_DISABLE_CIRCOMSPECT??"false"))r.logger.warn(`Skipping Circomspect static analysis because "SINDRI_LINT_DISABLE_CIRCOMSPECT=${_.default.env.SINDRI_LINT_DISABLE_CIRCOMSPECT}".`);else if(p==="circom")try{r.logger.info("Running static analysis with Circomspect by Trail of Bits...");let l=J.default.join("/","tmp","sindri",`circomspect-${(0,Lt.randomUUID)()}.sarif`),h,m;try{let{code:b}=await He("circomspect",["--library","/test/path/"],{tty:!1}),R=b===0?["--library",".","--library",J.default.join(".","node_modules")]:[],P="circuitPath"in a&&a.circuitPath?a.circuitPath:"circuit.circom",{method:B}=await He("circomspect",[...R,"--level","INFO","--sarif-file",l,P],{cwd:c,logger:r.logger,rootDirectory:c,tty:!1});if(m=B==="docker",B!==null){r.logger.debug("Parsing Circomspect SARIF results.");let z=(0,F.readFileSync)(l,{encoding:"utf-8"});h=JSON.parse(z)}else r.logger.warn(`Circomspect is not installed, skipping circomspect static analysis.
Please install Docker by following the directions at: https://docs.docker.com/get-docker/
Or install Circomspect by following the directions at: https://github.com/trailofbits/circomspect#installing-circomspect`),o+=1}catch(b){r.logger.fatal(`Error running Circomspect in "${c}".`),r.logger.error(b),e+=1}finally{try{(0,F.unlinkSync)(l)}catch{r.logger.debug(`Failed to delete temporary SARIF file "${l}".`)}}if(h){let b=h.runs[0]?.results??[];b.sort((R,P)=>{if(!R?.locations?.length||!P?.locations?.length||!R.locations[0]?.physicalLocation?.artifactLocation?.uri||!P.locations[0]?.physicalLocation?.artifactLocation?.uri||R.locations[0]?.physicalLocation?.region?.startLine==null||P.locations[0]?.physicalLocation?.region?.startLine==null||R.locations[0]?.physicalLocation?.region?.startColumn==null||P.locations[0]?.physicalLocation?.region?.startColumn==null)return 0;let B=R.locations[0].physicalLocation.artifactLocation.uri.localeCompare(P.locations[0].physicalLocation.artifactLocation.uri);if(B!==0)return B;let z=R.locations[0].physicalLocation.region.startLine-P.locations[0].physicalLocation.region.startLine;return z!==0?z:R.locations[0].physicalLocation.region.startColumn-P.locations[0].physicalLocation.region.startColumn});let w=!1;b.forEach(R=>{if(!R?.locations?.length||!R.locations[0]?.physicalLocation?.artifactLocation?.uri||R.locations[0]?.physicalLocation?.region?.startLine==null||R.locations[0]?.physicalLocation?.region?.startColumn==null||!R?.message?.text){r.logger.warn("Circomspect result is missing required fields, skipping."),r.logger.debug(R,"Missing Circomspect result fields:");return}let P=J.default.relative(m?"/sindri/":c,R.locations[0].physicalLocation.artifactLocation.uri.replace(/^file:\/\//,"")),{startColumn:B,startLine:z}=R.locations[0].physicalLocation.region,le=`${P}:${z}:${B} ${R.message.text} [Circomspect: ${R.ruleId}]`;R.level==="error"?(r.logger.error(le),w=!0,e+=1):R.level==="warning"?(r.logger.warn(le),w=!0,o+=1):r.logger.debug(le)}),w||r.logger.info("No issues found with Circomspect, good job!")}}catch(l){return r.logger.fatal("Error running Circomspect, aborting."),r.logger.debug(l),_.default.exit(1)}if(e===0&&o===0)r.logger.info("No issues found, good job!");else if(r.logger.warn(`Found ${e+o} problems (${e} errors, ${o} warnings).`),e>0)return r.logger.error(`Linting failed with ${e} errors.`),_.default.exit(1)});var Mt=y(require("os")),Ke=y(require("process")),Ht=require("@commander-js/extra-typings"),D=require("@inquirer/prompts");var Jt=new Ht.Command().name("login").description("Authorize the client.").option("-u, --base-url <URL>","The base URL for the Sindri API. Mainly useful for development.","https://sindri.app").action(async({baseUrl:t})=>{let e=new q;if(!e.auth){let c;try{c=await r._client.internal.teamMe()}catch(a){if(a instanceof I&&a.status===401)r.logger.warn("Existing credentials found, but invalid. Please continue logging in to update them.");else return r.logger.fatal("An unknown error occurred."),r.logger.error(a),Ke.default.exit(1)}if(c&&!await(0,D.confirm)({message:`You are already logged in as ${c.team.slug} on ${r.baseUrl}, are you sure you want to proceed?`,default:!1})){r.logger.info("Aborting.");return}}let n=await(0,D.input)({message:"Username:"}),i=await(0,D.password)({mask:!0,message:"Password:"}),s=await(0,D.input)({default:`${Mt.default.hostname().substring(0,28)}-sdk`,message:"New API Key Name:",validate:c=>c.length>32?"API key name must 32 characters or fewer.":!0});try{r._clientConfig.BASE=t;let c=await r._client.token.jwtTokenGenerate({username:n,password:i});r._clientConfig.TOKEN=c.access;let a=await r._client.internal.userMeWithJwtAuth(),f=await(0,D.select)({message:"Select a Organization:",choices:a.teams.map(({id:h,slug:m})=>({name:m,value:h}))}),p=a.teams.find(h=>h.id===f);if(!p)throw new Error("No organization selected.");r._clientConfig.HEADERS={...r._clientConfig.HEADERS,"Sindri-Team-Id":`${f}`};let u=await r._client.authorization.apikeyGenerate({username:n,password:i,name:s}),d=u.api_key,g=u.id,l=u.name;if(!d||!g||!l)throw new Error("Error generating API key.");e.update({auth:{apiKey:d,apiKeyId:g,apiKeyName:l,baseUrl:t,teamId:f,teamSlug:p.slug}}),r.logger.info("You have successfully authorized the client with your Sindri account.")}catch(c){r.logger.fatal("An irrecoverable error occurred."),r.logger.error(c),Ke.default.exit(1)}});var Ut=require("@commander-js/extra-typings"),zt=require("@inquirer/prompts");var Kt=new Ut.Command().name("logout").description("Remove the current client authorization credentials.").action(async()=>{let t=new q,e=t.auth;if(!e){r.logger.error("You must log in first with `sindri login`.");return}if(await(0,zt.confirm)({message:`Would you like to also revoke the "${e.apiKeyName}" API key? (recommended)`,default:!0}))try{await r._client.authorization.apikeyDelete(e.apiKeyId),r.logger.info(`Successfully revoked "${e.apiKeyName}" key.`)}catch(n){r.logger.warn(`Error revoking "${e.apiKeyName}" key, proceeding to clear credentials anyway.`),r.logger.error(n)}else r.logger.warn("Skipping revocation of existing key.");t.update({auth:null}),r.logger.info("You have successfully logged out.")});var U=y(require("fs")),Te=y(require("path")),T=y(require("process")),We=require("@commander-js/extra-typings");var Nr=async()=>{let t="";return new Promise(e=>{T.default.stdin.on("data",o=>t+=o),T.default.stdin.on("end",()=>e(t))})},_r=new We.Command().name("create").description("Create a proof for the circuit.").option("-i, --input <input>","Input file for the proof (defaults to stdin if non-TTY; `input.json`, `example-input.json`, or `Prover.toml` otherwise).").option("-m, --meta <key=value>","Metadata key/value to attach to the proof.",Ce(r.logger),se({logger:r.logger,raiseExceptions:!1})).option("-t, --tag <tag>","Tag to generate the proof from.","latest").option("-v, --verify","Perform verification of the proof after creating it.").action(async({input:t,meta:e,tag:o,verify:n})=>{if(!r.apiKey||!r.baseUrl)return r.logger.warn("You must login first with `sindri login`."),T.default.exit(1);let i=Te.default.resolve(".");if(!U.default.existsSync(i))return r.logger.error(`The "${i}" directory does not exist. Aborting.`),T.default.exit(1);let s=O(/^sindri.json$/i,i);if(!s)return r.logger.error(`No "sindri.json" file was found in or above "${i}". Aborting.`),T.default.exit(1);r.logger.debug(`Found "sindri.json" at "${s}".`);let c=Te.default.dirname(s);r.logger.debug(`Changing current directory to "${c}".`),T.default.chdir(c);let a={};try{let g=U.default.readFileSync(s,{encoding:"utf-8"});a=JSON.parse(g),r.logger.debug(`Successfully loaded "sindri.json" from "${s}":`),r.logger.debug(a)}catch(g){return r.logger.fatal(`Error loading "${s}", perhaps it is not valid JSON?`),r.logger.error(g),T.default.exit(1)}if(!("name"in a))return r.logger.error('No "name" field found in "sindri.json". Aborting.'),T.default.exit(1);let f=a.name,p;if(t&&U.default.existsSync(t)?p=U.default.readFileSync(t,"utf-8"):(!T.default.stdin.isTTY||t==="-")&&(p=await Nr()),!p||!p.trim()){let g=["input.json","example-input.json","Prover.toml"];for(let l of g){let h=Te.default.join(c,l);if(U.default.existsSync(l)){p=U.default.readFileSync(h,"utf-8");break}}p||(console.error("No input file specified, none of the default files found, and not in a non-TTY context."),T.default.exit(1))}let u="circuitType"in a&&typeof a.circuitType=="string"&&["circom"].includes(a.circuitType),d=`${f}:${o}`;try{let g=Date.now(),l=await r.proveCircuit(d,p,!!n,u,e),h=((Date.now()-g)/1e3).toFixed(1);if(l.status==="Ready")r.logger.info(`Proof generated successfully after ${h} seconds.`);else return l.status==="Failed"?(r.logger.error(`Proof generation failed after ${h} seconds: `+(l.error??"Unknown error.")),T.default.exit(1)):(r.logger.fatal(`Unexpected response status: ${l.status}`),T.default.exit(1));L(JSON.stringify({proofId:l.proof_id,meta:l.meta,proof:l.proof,public:l.public,verification_key:l.verification_key},null,2))}catch(g){return g instanceof I&&g.status===404?r.logger.error(`No circuit found with the name "${f}" and tag "${o}".`):(r.logger.fatal("An unknown error occurred."),r.logger.error(g)),T.default.exit(1)}}),Wt=new We.Command().name("proof").description("Commands related to proofs for the current circuit.").addCommand(_r);var Ve=y(require("process")),Vt=require("@commander-js/extra-typings");var Gt=new Vt.Command().name("whoami").description("Display the currently authorized organization name.").action(async()=>{if(!r.apiKey||!r.baseUrl)return r.logger.warn("You must login first with `sindri login`."),Ve.default.exit(1);try{let t=await r._client.internal.teamMe();L(t.team.slug)}catch(t){if(t instanceof I&&t.status===401)r.logger.error("Your credentials are invalid. Please log in again with `sindri login`.");else return r.logger.fatal("An unknown error occurred."),r.logger.error(t),Ve.default.exit(1)}});var Yt="0.0.1-alpha.61",Zt=Yt?`v${Yt}`:"unknown",Xt=new Qt.Command().name("sindri").description("The Sindri CLI client.").version(Zt).enablePositionalOptions().option("-d, --debug","Enable debug logging.",!1).option("-q, --quiet","Disable all logging aside from direct command outputs for programmatic consumption.",!1).addCommand(ft).addCommand(gt).addCommand(xt).addCommand(Tt).addCommand(Dt).addCommand(Bt).addCommand(Jt).addCommand(Kt).addCommand(Wt).addCommand(Gt).hook("preAction",async t=>{let{debug:e,quiet:o}=t.opts();if(e&&o)return r.logLevel="error",r.logger.error("You cannot specify both the `--debug` and `--quiet` arguments."),(0,Ae.exit)(1);e?r.logLevel="trace":o?r.logLevel="silent":r.logLevel="info",r._clientConfig.HEADERS={...r._clientConfig.HEADERS,"Sindri-Client":`sindri-js-cli/${Zt}`}});require.main===module&&Xt.parse(Ae.argv);0&&(module.exports={program});
//# sourceMappingURL=index.js.map